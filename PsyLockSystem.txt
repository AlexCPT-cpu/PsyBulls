// SPDX-License-Identifier: MIT
import "./utils/RecoverTokens.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./TestNft.sol";

pragma solidity ^0.8.0;



contract PsyLockSystem is IERC721Receiver, Ownable, RecoverTokens {
    using EnumerableSet for EnumerableSet.UintSet;

    TestNft public ERC721_CONTRACT;

    mapping(address => EnumerableSet.UintSet) private _deposits;
    mapping (uint256 => uint256) public tokenRarity;
    struct NFTInformation {
        uint256 lockPeriod;
        uint256 tokenId;
    }
    mapping(uint256 => NFTInformation) public NFTInfos;
    uint256 lockTime = 30 days;   
    bool started;

    constructor(
        TestNft _erc721
    ) {
        ERC721_CONTRACT = _erc721;
        // number of tokens Per day
        started = false;
    }


    function setRarity(uint256[] calldata _tokenIds, uint256[] calldata _raritys) external onlyOwner() {
        uint256 tokenLength = _tokenIds.length;
        uint256 rarityLength = _raritys.length;
        require(tokenLength == rarityLength, 'invalid length arguements');
        for (uint256 i; i < tokenLength; ++i) {
            tokenRarity[_tokenIds[i]] = _raritys[i];
        }
    }
    
    function toggleStart() public onlyOwner() {
        started = !started;
    }

    function depositsOf(address account)
        public
        view
        returns (uint256[] memory) {
        EnumerableSet.UintSet storage depositSet = _deposits[account];
        uint256[] memory tokenIds = new uint256[](depositSet.length());

        for (uint256 i; i < depositSet.length(); i++) {
            tokenIds[i] = depositSet.at(i);
        }

        return tokenIds;
    }

    function findRarityOfNFT(uint256 tokenId)
        public
        view
        returns (uint256 rate) {
        uint256 rarity = tokenRarity[tokenId];
        
        return rarity;
    }

    function findRateOfUser(address user) public view returns(uint256) {
        uint256[] memory tokensOfUser = depositsOf(user);
        uint256 userTL = tokensOfUser.length;
        uint256 i = 0;
        uint256 totalRate;

        for(i; i < userTL; ++i) {
           NFTInformation memory _nftInfos = NFTInfos[tokensOfUser[i]];
           if (block.timestamp < _nftInfos.lockPeriod) {
             uint256 tokenR = findRarityOfNFT(_nftInfos.tokenId);
            totalRate += tokenR;
           }
        }

        return totalRate;
    }

    function resetLockTime(uint256 _locktime) external onlyOwner {
        lockTime = _locktime;
    }

    function deposit(uint256[] calldata tokenIds) external {
        require(started, 'Lock contract not started yet');
        uint256 tokenLength = tokenIds.length;
        uint256 i = 0;
        for (i; i < tokenLength; ++i) {
            NFTInformation storage _nftInfos = NFTInfos[tokenIds[i]];
           ERC721_CONTRACT.transferFrom(msg.sender, address(this), tokenIds[i]);
            _deposits[msg.sender].add(tokenIds[i]);
            _nftInfos.lockPeriod = block.timestamp + lockTime;
            _nftInfos.tokenId = (tokenIds[i]);
        }
    }

    function withdraw(uint256[] calldata tokenIds) external {
        uint256 tokenLength = tokenIds.length;
        uint256 i = 0;
        for (i; i < tokenLength; ++i) {
        NFTInformation storage _nftInfos = NFTInfos[tokenIds[i]];
        uint256 lockT = _nftInfos.lockPeriod;
        require(block.timestamp > lockT, 'lock time not exceeded');
        require(_deposits[msg.sender].contains(tokenIds[i]),'Token not deposited');

            _deposits[msg.sender].remove(tokenIds[i]);

        ERC721_CONTRACT.transferFrom(address(this), msg.sender, tokenIds[i]);
        }
    }


     function restake(uint256[] calldata tokenIds) external {
        uint256 tokenLength = tokenIds.length;
        uint256 i = 0;
        for (i; i < tokenLength; ++i) {
        NFTInformation storage _nftInfos = NFTInfos[tokenIds[i]];
        _nftInfos.lockPeriod = block.timestamp + lockTime;
        }
    }

     function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external pure override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }
}