/**
 *Submitted for verification at BscScan.com on 2022-06-23
*/

// File: @openzeppelin/contracts/utils/math/SafeMath.sol

// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)
import "./utils/RecoverTokens.sol";
import "./PsyLock.sol";

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */


// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */


// File: contracts/G-DogzMiner.sol

pragma solidity ^0.8.7;


contract PsyMiner is RecoverTokens {
    using SafeMath for uint256;

    PsyLockSystem public PsyLockContract;

    uint256[6] public COWS_TO_MILK_1MINERS = [4320000, 2880000, 1440000, 1080000, 864000, 786000];
    uint256[6] public MARKET_SEED = [432000000000, 288000000000, 144000000000, 108000000000, 86400000000, 78600000000];
    uint256[5] public RATE_LIMITER = [5000, 30000, 60000, 75000, 90000];
    uint256 private PSN = 10000;
    uint256 private PSNH = 5000;
    uint256 private devFeeVal = 5;
    bool private initialized = false;
    address payable public devAddr;
    mapping(address => uint256) private compoundMiners;
    mapping(address => uint256) private claimedClams;
    mapping(address => uint256) private lastCompound;
    mapping(address => address) private referrals;
    mapping(address => bool) private hasParticipated;
    uint256 private marketClams;
    uint256 public uniqueUsers;
    event devAddrressUpdated(address _old, address _new);

    constructor(address _devAdd, PsyLockSystem _psyLockContract) {
        devAddr = payable(_devAdd);
        PsyLockContract = _psyLockContract;
    }

    function updatedevAddrress(address newAddress) external onlyOwner {
        require(newAddress != address(0), "Can not be zero");
        emit devAddrressUpdated(devAddr, newAddress);
        devAddr = payable(newAddress);
    }

    function buyMilk(address ref, address _addr) public payable {
        uint256[] memory nfts = PsyLockContract.depositsOf(_addr);
        require(nfts.length > 0, "No NFTs Staked");
        require(initialized);
        (, uint i) = calculateRate(_addr);
        uint256 ClamsBought = calculateMilkBuy(
            msg.value,
            SafeMath.sub(address(this).balance, msg.value),
            i
        );
        ClamsBought = SafeMath.sub(ClamsBought, devFee(ClamsBought));
        uint256 fee = devFee(msg.value);
        devAddr.transfer(fee);
        claimedClams[msg.sender] = SafeMath.add(
            claimedClams[msg.sender],
            ClamsBought
        );

        if (!hasParticipated[msg.sender]) {
            hasParticipated[msg.sender] = true;
            uniqueUsers++;
        }
        milkCows(ref);
    }

    function milkCows(address ref) public {
        require(initialized);

        if (ref == msg.sender) {
            ref = address(0);
        }

        if (
            referrals[msg.sender] == address(0) &&
            referrals[msg.sender] != msg.sender
        ) {
            referrals[msg.sender] = ref;
        }
        (uint r, uint i) = calculateRate(msg.sender);

        uint256 clamsUsed = getMyMilk(msg.sender);
        uint256 newMiners = SafeMath.div(clamsUsed, r);
        compoundMiners[msg.sender] = SafeMath.add(
            compoundMiners[msg.sender],
            newMiners
        );
        claimedClams[msg.sender] = 0;
        lastCompound[msg.sender] = block.timestamp;

        //send referral clams
        claimedClams[referrals[msg.sender]] = SafeMath.add(
            claimedClams[referrals[msg.sender]],
            SafeMath.div(clamsUsed, 8)
        );

        //boost market to nerf miners hoarding
        MARKET_SEED[i] = SafeMath.add(MARKET_SEED[i], SafeMath.div(clamsUsed, 5));
    }

    function sellMilk() public {
        require(initialized);
        (, uint i) = calculateRate(msg.sender);
        uint256 hasClams = getMyMilk(msg.sender);
        uint256 clamsValue = calculateMilkSell(hasClams, i);
        uint256 fee = devFee(clamsValue);
        claimedClams[msg.sender] = 0;
        lastCompound[msg.sender] = block.timestamp;
        MARKET_SEED[i] = SafeMath.add(MARKET_SEED[i], hasClams);
        devAddr.transfer(fee);
        payable(msg.sender).transfer(SafeMath.sub(clamsValue, fee));
    }

    function clamsRewards(address _addr) public view returns (uint256) {
        uint256 hasClams = getMyMilk(_addr);
        (, uint i) = calculateRate(_addr);
        uint256 clamsValue = calculateMilkSell(hasClams, i);
        return clamsValue;
    }

    function calculateRate(address _addr) public view returns (uint256 marketEggs, uint256 marketSeed) {
        uint256 rate = PsyLockContract.findRateOfUser(_addr);
        if (rate < RATE_LIMITER[0]) {
            marketEggs = COWS_TO_MILK_1MINERS[0];
            marketSeed = MARKET_SEED[0];
        } else if (rate < RATE_LIMITER[1]) {
            marketEggs = COWS_TO_MILK_1MINERS[1];
            marketSeed = MARKET_SEED[1];
        }  else if (rate < RATE_LIMITER[2]) {
            marketEggs = COWS_TO_MILK_1MINERS[2];
            marketSeed = MARKET_SEED[2];
        }  else if (rate < RATE_LIMITER[3]) {
            marketEggs = COWS_TO_MILK_1MINERS[3];
            marketSeed = MARKET_SEED[3];
        }  else if (rate < RATE_LIMITER[4]) {
            marketEggs = COWS_TO_MILK_1MINERS[4];
            marketSeed = MARKET_SEED[4];
        }  else if (rate >= RATE_LIMITER[4]) {
            marketEggs = COWS_TO_MILK_1MINERS[5];
            marketSeed = MARKET_SEED[5];
        }
    }

    function setPsyLock(PsyLockSystem _newLockContract) external onlyOwner{
        PsyLockContract = _newLockContract;
    }

    function setRateDetails(uint256[6] calldata _compoundMiners, uint256[6] calldata _marketSeed, uint256[5] calldata _rateLimiter) external onlyOwner {
        require(_compoundMiners.length == _marketSeed.length, "invalid length arg");
        COWS_TO_MILK_1MINERS = _compoundMiners;
        MARKET_SEED = _marketSeed;
        RATE_LIMITER = _rateLimiter;
    }

    function calculateTrade(
        uint256 rt,
        uint256 rs,
        uint256 bs
    ) private view returns (uint256) {
        return
            SafeMath.div(
                SafeMath.mul(PSN, bs),
                SafeMath.add(
                    PSNH,
                    SafeMath.div(
                        SafeMath.add(
                            SafeMath.mul(PSN, rs),
                            SafeMath.mul(PSNH, rt)
                        ),
                        rt
                    )
                )
            );
    }

    function calculateMilkSell(uint256 milk, uint256 i) public view returns (uint256) {
        return calculateTrade(milk, i, address(this).balance);
    }

    function calculateMilkBuy(uint256 eth, uint256 contractBalance, uint256 i)
        public
        view
        returns (uint256)
    {
        return calculateTrade(eth, contractBalance, i);
    }

    function calculateMilkBuySimple(uint256 eth, address _addr) public view returns (uint256) {
        (, uint i) = calculateRate(_addr);
        return calculateMilkBuy(eth, address(this).balance, i);
    }

    function devFee(uint256 amount) private view returns (uint256) {
        return SafeMath.div(SafeMath.mul(amount, devFeeVal), 100);
    }

    function initialize() public payable onlyOwner {
        initialized = true;
      
    }

    function pause(bool _bool) public payable onlyOwner {
        initialized = _bool;
    }

    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function getMyMiners(address adr) public view returns (uint256) {
        return compoundMiners[adr];
    }

    function getMyMilk(address adr) public view returns (uint256) {
        return SafeMath.add(claimedClams[adr], getMilkSinceLastCompound(adr));
    }

    function getMilkSinceLastCompound(address _addr)
        public
        view
        returns (uint256)
    {
        (uint r,) = calculateRate(_addr);
        uint256 secondsPassed = min(
            r,
            SafeMath.sub(block.timestamp, lastCompound[_addr])
        );
        return SafeMath.mul(secondsPassed, compoundMiners[_addr]);
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }
}/**
 *Submitted for verification at BscScan.com on 2022-06-23
*/

// File: @openzeppelin/contracts/utils/math/SafeMath.sol

// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)
import "./utils/RecoverTokens.sol";
import "./PsyLock.sol";

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */


// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */


// File: contracts/G-DogzMiner.sol

pragma solidity ^0.8.7;


contract PsyMiner is RecoverTokens {
    using SafeMath for uint256;

    PsyLockSystem public PsyLockContract;

    uint256[6] public COWS_TO_MILK_1MINERS = [4320000, 2880000, 1440000, 1080000, 864000, 786000];
    uint256[6] public MARKET_SEED = [432000000000, 288000000000, 144000000000, 108000000000, 86400000000, 78600000000];
    uint256[5] public RATE_LIMITER = [5000, 30000, 60000, 75000, 90000];
    uint256 private PSN = 10000;
    uint256 private PSNH = 5000;
    uint256 private devFeeVal = 5;
    bool private initialized = false;
    address payable public devAddr;
    mapping(address => uint256) private compoundMiners;
    mapping(address => uint256) private claimedClams;
    mapping(address => uint256) private lastCompound;
    mapping(address => address) private referrals;
    mapping(address => bool) private hasParticipated;
    uint256 private marketClams;
    uint256 public uniqueUsers;
    event devAddrressUpdated(address _old, address _new);

    constructor(address _devAdd, PsyLockSystem _psyLockContract) {
        devAddr = payable(_devAdd);
        PsyLockContract = _psyLockContract;
    }

    function updatedevAddrress(address newAddress) external onlyOwner {
        require(newAddress != address(0), "Can not be zero");
        emit devAddrressUpdated(devAddr, newAddress);
        devAddr = payable(newAddress);
    }

    function buyMilk(address ref, address _addr) public payable {
        uint256[] memory nfts = PsyLockContract.depositsOf(_addr);
        require(nfts.length > 0, "No NFTs Staked");
        require(initialized);
        (, uint i) = calculateRate(_addr);
        uint256 ClamsBought = calculateMilkBuy(
            msg.value,
            SafeMath.sub(address(this).balance, msg.value),
            i
        );
        ClamsBought = SafeMath.sub(ClamsBought, devFee(ClamsBought));
        uint256 fee = devFee(msg.value);
        devAddr.transfer(fee);
        claimedClams[msg.sender] = SafeMath.add(
            claimedClams[msg.sender],
            ClamsBought
        );

        if (!hasParticipated[msg.sender]) {
            hasParticipated[msg.sender] = true;
            uniqueUsers++;
        }
        milkCows(ref);
    }

    function milkCows(address ref) public {
        require(initialized);

        if (ref == msg.sender) {
            ref = address(0);
        }

        if (
            referrals[msg.sender] == address(0) &&
            referrals[msg.sender] != msg.sender
        ) {
            referrals[msg.sender] = ref;
        }
        (uint r, uint i) = calculateRate(msg.sender);

        uint256 clamsUsed = getMyMilk(msg.sender);
        uint256 newMiners = SafeMath.div(clamsUsed, r);
        compoundMiners[msg.sender] = SafeMath.add(
            compoundMiners[msg.sender],
            newMiners
        );
        claimedClams[msg.sender] = 0;
        lastCompound[msg.sender] = block.timestamp;

        //send referral clams
        claimedClams[referrals[msg.sender]] = SafeMath.add(
            claimedClams[referrals[msg.sender]],
            SafeMath.div(clamsUsed, 8)
        );

        //boost market to nerf miners hoarding
        MARKET_SEED[i] = SafeMath.add(MARKET_SEED[i], SafeMath.div(clamsUsed, 5));
    }

    function sellMilk() public {
        require(initialized);
        (, uint i) = calculateRate(msg.sender);
        uint256 hasClams = getMyMilk(msg.sender);
        uint256 clamsValue = calculateMilkSell(hasClams, i);
        uint256 fee = devFee(clamsValue);
        claimedClams[msg.sender] = 0;
        lastCompound[msg.sender] = block.timestamp;
        MARKET_SEED[i] = SafeMath.add(MARKET_SEED[i], hasClams);
        devAddr.transfer(fee);
        payable(msg.sender).transfer(SafeMath.sub(clamsValue, fee));
    }

    function clamsRewards(address _addr) public view returns (uint256) {
        uint256 hasClams = getMyMilk(_addr);
        (, uint i) = calculateRate(_addr);
        uint256 clamsValue = calculateMilkSell(hasClams, i);
        return clamsValue;
    }

    function calculateRate(address _addr) public view returns (uint256 marketEggs, uint256 marketSeed) {
        uint256 rate = PsyLockContract.findRateOfUser(_addr);
        if (rate < RATE_LIMITER[0]) {
            marketEggs = COWS_TO_MILK_1MINERS[0];
            marketSeed = MARKET_SEED[0];
        } else if (rate < RATE_LIMITER[1]) {
            marketEggs = COWS_TO_MILK_1MINERS[1];
            marketSeed = MARKET_SEED[1];
        }  else if (rate < RATE_LIMITER[2]) {
            marketEggs = COWS_TO_MILK_1MINERS[2];
            marketSeed = MARKET_SEED[2];
        }  else if (rate < RATE_LIMITER[3]) {
            marketEggs = COWS_TO_MILK_1MINERS[3];
            marketSeed = MARKET_SEED[3];
        }  else if (rate < RATE_LIMITER[4]) {
            marketEggs = COWS_TO_MILK_1MINERS[4];
            marketSeed = MARKET_SEED[4];
        }  else if (rate >= RATE_LIMITER[4]) {
            marketEggs = COWS_TO_MILK_1MINERS[5];
            marketSeed = MARKET_SEED[5];
        }
    }

    function setPsyLock(PsyLockSystem _newLockContract) external onlyOwner{
        PsyLockContract = _newLockContract;
    }

    function setRateDetails(uint256[6] calldata _compoundMiners, uint256[6] calldata _marketSeed, uint256[5] calldata _rateLimiter) external onlyOwner {
        require(_compoundMiners.length == _marketSeed.length, "invalid length arg");
        COWS_TO_MILK_1MINERS = _compoundMiners;
        MARKET_SEED = _marketSeed;
        RATE_LIMITER = _rateLimiter;
    }

    function calculateTrade(
        uint256 rt,
        uint256 rs,
        uint256 bs
    ) private view returns (uint256) {
        return
            SafeMath.div(
                SafeMath.mul(PSN, bs),
                SafeMath.add(
                    PSNH,
                    SafeMath.div(
                        SafeMath.add(
                            SafeMath.mul(PSN, rs),
                            SafeMath.mul(PSNH, rt)
                        ),
                        rt
                    )
                )
            );
    }

    function calculateMilkSell(uint256 milk, uint256 i) public view returns (uint256) {
        return calculateTrade(milk, i, address(this).balance);
    }

    function calculateMilkBuy(uint256 eth, uint256 contractBalance, uint256 i)
        public
        view
        returns (uint256)
    {
        return calculateTrade(eth, contractBalance, i);
    }

    function calculateMilkBuySimple(uint256 eth, address _addr) public view returns (uint256) {
        (, uint i) = calculateRate(_addr);
        return calculateMilkBuy(eth, address(this).balance, i);
    }

    function devFee(uint256 amount) private view returns (uint256) {
        return SafeMath.div(SafeMath.mul(amount, devFeeVal), 100);
    }

    function initialize() public payable onlyOwner {
        initialized = true;
      
    }

    function pause(bool _bool) public payable onlyOwner {
        initialized = _bool;
    }

    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function getMyMiners(address adr) public view returns (uint256) {
        return compoundMiners[adr];
    }

    function getMyMilk(address adr) public view returns (uint256) {
        return SafeMath.add(claimedClams[adr], getMilkSinceLastCompound(adr));
    }

    function getMilkSinceLastCompound(address _addr)
        public
        view
        returns (uint256)
    {
        (uint r,) = calculateRate(_addr);
        uint256 secondsPassed = min(
            r,
            SafeMath.sub(block.timestamp, lastCompound[_addr])
        );
        return SafeMath.mul(secondsPassed, compoundMiners[_addr]);
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }
}